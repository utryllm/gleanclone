Metadata-Version: 2.2
Name: spring-boot-analyzer
Version: 0.1.0
Summary: A tool for analyzing Spring Boot applications using LLMs
Home-page: https://github.com/yourusername/spring-boot-analyzer
Author: Your Name
Author-email: your.email@example.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: sentence-transformers>=2.2.2
Requires-Dist: scikit-learn>=1.0.2
Requires-Dist: numpy>=1.22.0
Requires-Dist: openai>=1.3.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: markdown>=3.4.0
Requires-Dist: pathlib>=1.0.1
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Spring Boot Application Analyzer

This tool provides intelligent analysis of Spring Boot applications using LLMs (Large Language Models) with context-aware prompting. It leverages the summaries, diagrams, and other artifacts generated by the `glean_code_ds.py` script to provide detailed answers to questions about the application's architecture, functionality, and potential changes.

## Features

- **Semantic Search**: Finds the most relevant components for any query using embeddings
- **Context-Aware Analysis**: Builds prompts with just the right amount of context for each query
- **Self-Verification**: Automatically checks responses for consistency with the codebase
- **Specialized Templates**: Includes templates for different types of analysis:
  - General application analysis
  - Feature implementation planning
  - Code change impact assessment

## Prerequisites

- Python 3.8+
- OpenAI API key (or other compatible LLM provider)
- Generated summary files from `glean_code_ds.py`

## Installation

1. Clone this repository
2. Install dependencies:
   ```
   pip install -r requirements.txt
   ```
3. Create a `.env` file with your OpenAI API key:
   ```
   OPENAI_API_KEY=your_api_key_here
   ```

## Usage

### Basic Usage

```python
from spring_boot_analyzer import QueryProcessor

# Initialize the processor
processor = QueryProcessor(summary_dir="path/to/summary")

# Process a general query
response = processor.process_query("How does the transaction flow work in this application?")
print(response)

# Analyze feature implementation
feature_analysis = processor.analyze_feature_implementation(
    "Add a feature to allow users to set up recurring transfers between accounts"
)
print(feature_analysis)

# Analyze code change impact
impact_analysis = processor.analyze_code_change_impact(
    "Change the Transaction entity to include a 'category' field"
)
print(impact_analysis)
```

### Command Line Usage

You can also run the script directly:

```bash
python spring_boot_analyzer.py
```

This will run a set of example queries to demonstrate the functionality.

## Required Files

The analyzer expects the following files in the summary directory:

- `summary_of_summaries.md`: High-level application overview
- `file_summaries/*.md`: Individual file summaries
- `module_summaries/*.md`: Module-level summaries
- `enhanced_api_flow.json`: API flow representation
- `component_relationship_matrix.md`: Component dependency matrix
- `llm_prompts/*.md`: Prompt templates (optional)

## Customizing Templates

You can create custom prompt templates in the `summary/llm_prompts/` directory. Template files should be markdown files with placeholders like:

- `{app_overview}`: Application overview
- `{components}`: Relevant component summaries
- `{api_flows}`: Related API flows
- `{matrix}`: Component relationship matrix
- `{query}`: The user's query

## License

MIT

